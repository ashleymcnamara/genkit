package main

import "html/template"

var registrationTemplate = template.Must(template.New("render").Parse(`// generated by genkit -- DO NOT EDIT
package {{.Package}}

import (
	"fmt"
	"net"
	"net/http"
	"os"
	"time"
	"xor/base"

	"golang.org/x/net/context"

	"github.com/go-kit/kit/metrics/statsd"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/spf13/viper"
)

var log = base.Logger
{{range .Types}}
func GetMux(ctx context.Context) *http.ServeMux {

	statsdhost := viper.GetString("statsdhost")
	statsdport := viper.GetInt("statsdport")
	statsdhp := fmt.Sprintf("%s:%d", statsdhost, statsdport)
	statsdWriter, err := net.Dial("udp", statsdhp)
	if err != nil {
		os.Exit(1)
	}
	m := http.NewServeMux()

	requestCount := statsd.NewCounter(statsdWriter, "{{.LowerName}}_request_count", 5*time.Second)
	requestLatency := statsd.NewHistogram(statsdWriter, "{{.LowerName}}_request_latency_ms", 5*time.Second)
	var svc {{.Name}}Service
	svc = {{.LowerName}}Service{ {{.LowerName}}List: make(map[string]{{.Name}})}
	svc = loggingMiddleware(log)(svc)
	svc = instrumentingMiddleware(requestCount, requestLatency)(svc)

	createHandler := httptransport.Server{
		Context:            ctx,
		Endpoint:           makeCreateEndpoint(svc),
		DecodeRequestFunc:  decodeCreateRequest,
		EncodeResponseFunc: encodeResponse,
	}

	getHandler := httptransport.Server{
		Context:            ctx,
		Endpoint:           makeGetEndpoint(svc),
		DecodeRequestFunc:  decodeGetRequest,
		EncodeResponseFunc: encodeResponse,
	}
	updateHandler := httptransport.Server{
		Context:            ctx,
		Endpoint:           makeUpdateEndpoint(svc),
		DecodeRequestFunc:  decodeUpdateRequest,
		EncodeResponseFunc: encodeResponse,
	}

	listHandler := httptransport.Server{
		Context:            ctx,
		Endpoint:           makeListEndpoint(svc),
		DecodeRequestFunc:  decodeListRequest,
		EncodeResponseFunc: encodeResponse,
	}
	deleteHandler := httptransport.Server{
		Context:            ctx,
		Endpoint:           makeDeleteEndpoint(svc),
		DecodeRequestFunc:  decodeDeleteRequest,
		EncodeResponseFunc: encodeResponse,
	}
	m.Handle("/create", createHandler)
	m.Handle("/get", getHandler)
	m.Handle("/update", updateHandler)
	m.Handle("/list", listHandler)
	m.Handle("/delete", deleteHandler)
	return m
}
{{end}}`))
